name: Commit Stage

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy:
        description: "Do you want to deploy the app?"
        required: false
        default: "no"

env:
  REGISTRY: hub.docker.com
  IMAGE_NAME: irma-ui

jobs:
  test:
    name: Test
    timeout-minutes: 10
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "21.5.0"

      - name: Install dependencies
        run: npm install

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Run Playwright tests
        run: npm test

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  build-and-deploy:
    needs: test
    name: Build and Deploy
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get latest version and increment
        id: version
        run: |
          # Fetch all tags from Docker Hub
          VERSIONS=$(curl -s "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}/tags/?page_size=100" | jq -r '.results[].name')
          
          # Get the latest version number (excluding 'latest' tag)
          LATEST_VERSION=$(echo "$VERSIONS" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          
          if [ -z "$LATEST_VERSION" ]; then
            # If no version exists, start with 1.0.0
            NEW_VERSION="1.0.0"
          else
            # Split version into parts
            MAJOR=$(echo $LATEST_VERSION | cut -d. -f1)
            MINOR=$(echo $LATEST_VERSION | cut -d. -f2)
            PATCH=$(echo $LATEST_VERSION | cut -d. -f3)
            
            # Increment patch version
            PATCH=$((PATCH + 1))
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $NEW_VERSION"

      - name: Update Docker Compose version
        run: |
          # Export version for docker-compose
          echo "VERSION=${{ steps.version.outputs.new_version }}" >> $GITHUB_ENV
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV

      - name: Build and push with Docker Compose
        run: |
          docker compose build
          docker compose push

      - name: Setup deployment files and deploy
        uses: appleboy/ssh-action@master
        env:
          DOCKER_COMPOSE_CONTENT: |
            version: '3.8'
            services:
              irma-ui:
                container_name: irma-ui
                image: ${{ secrets.DOCKER_USERNAME }}/irma-ui:${{ steps.version.outputs.new_version }}
                ports:
                  - "3000:3000"
                environment:
                  - PORT=3000
                  - NODE_ENV=production
                networks:
                  - irma-network

              irma-nginx:
                container_name: irma-nginx
                image: nginx:alpine
                ports:
                  - "80:80"
                volumes:
                  - ./nginx.conf:/etc/nginx/nginx.conf:ro
                  - ./nginx/mime.types:/etc/nginx/mime.types:ro
                depends_on:
                  - irma-ui
                networks:
                  - irma-network

            networks:
              irma-network:
                driver: bridge
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          envs: DOCKER_COMPOSE_CONTENT
          script: |
            # Create deployment directory and nginx config directory
            mkdir -p /opt/irma-ui/nginx
            cd /opt/irma-ui
            
            # Stop and remove all containers (including those not managed by compose)
            docker stop $(docker ps -aq) || true
            docker rm $(docker ps -aq) || true
            
            # Remove all networks to ensure clean slate
            docker network prune -f
            
            # Force remove the specific containers if they exist
            docker rm -f irma-ui irma-nginx || true
            
            # Create nginx.conf
            cat > nginx.conf << 'EOL'
            events {
              worker_connections 1024;
            }

            http {
              include       mime.types;
              default_type  application/octet-stream;
              sendfile      on;
              keepalive_timeout 65;

              # 🔁 Upstreams
              upstream irma_ui {
                server irma-ui:3000;
              }

              server {
                listen 80;

                # 🌐 Multi-tenant domain support
                server_name *.govsuiteng.com govsuiteng.com;

                # Extract tenant ID from subdomain
                set $tenant "default";
                if ($host ~ "^([a-z0-9-]+)\.govsuiteng\.com$") {
                  set $tenant $1;
                }

                # ⚛️ React SPA (irma-ui)
                location / {
                  proxy_pass http://irma_ui;
                  proxy_http_version 1.1;
                  proxy_set_header Host $host;
                  proxy_set_header X-Tenant-ID $tenant;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_cache_bypass $http_upgrade;

                  add_header Access-Control-Allow-Origin * always;
                  add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE" always;
                  add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
                }
              }
            }
            EOL
            
            # Create mime.types file
            cat > nginx/mime.types << 'EOL'
            types {
                text/html                                        html htm shtml;
                text/css                                         css;
                text/xml                                         xml;
                image/gif                                        gif;
                image/jpeg                                       jpeg jpg;
                application/javascript                           js;
                application/json                                 json;
                image/png                                        png;
                image/svg+xml                                    svg svgz;
                image/x-icon                                     ico;
                font/woff                                        woff;
                font/woff2                                       woff2;
                application/x-font-ttf                           ttf;
                application/x-font-otf                           otf;
            }
            EOL
            
            # Create docker-compose.yml
            echo "$DOCKER_COMPOSE_CONTENT" > docker-compose.yml
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # Pull the latest images
            docker compose pull --quiet
            
            # Stop and remove existing containers from docker-compose
            docker compose down --volumes --remove-orphans
            
            # Start the new containers
            docker compose up -d --force-recreate --remove-orphans
            
            # Verify the containers are running
            docker ps
            
            # Clean up
            docker system prune -af --volumes

