name: Commit Stage

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy:
        description: "Do you want to deploy the app?"
        required: false
        default: "no"

env:
  REGISTRY: hub.docker.com
  IMAGE_NAME: irma-ui

jobs:
  test:
    name: Test
    timeout-minutes: 10
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "21.5.0"

      - name: Install dependencies
        run: npm install

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Run Playwright tests
        run: npm test

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  build-and-deploy:
    needs: test
    name: Build and Deploy
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get latest version and increment
        id: version
        run: |
          # Fetch all tags from Docker Hub
          VERSIONS=$(curl -s "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}/tags/?page_size=100" | jq -r '.results[].name')
          
          # Get the latest version number (excluding 'latest' tag)
          LATEST_VERSION=$(echo "$VERSIONS" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          
          if [ -z "$LATEST_VERSION" ]; then
            # If no version exists, start with 1.0.0
            NEW_VERSION="1.0.0"
          else
            # Split version into parts
            MAJOR=$(echo $LATEST_VERSION | cut -d. -f1)
            MINOR=$(echo $LATEST_VERSION | cut -d. -f2)
            PATCH=$(echo $LATEST_VERSION | cut -d. -f3)
            
            # Increment patch version
            PATCH=$((PATCH + 1))
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $NEW_VERSION"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }}
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          script: |
            # Pull the new image
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }}
            
            # Stop and remove the existing container (if it exists)
            docker stop irma-ui || true
            docker rm irma-ui || true
            
            # Run the new container with the new version
            docker run -d \
              --name irma-ui \
              --restart unless-stopped \
              -p 3000:3000 \
              ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }}
            
            # Clean up old images
            docker image prune -f

