name: Commit Stage

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy:
        description: "Do you want to deploy the app?"
        required: false
        default: "no"

env:
  REGISTRY: hub.docker.com
  IMAGE_NAME: irma-ui

jobs:
  test:
    name: Test
    timeout-minutes: 10
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "21.5.0"

      - name: Install dependencies
        run: npm install

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Run Playwright tests
        run: npm test

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  build-and-deploy:
    needs: test
    name: Build and Deploy
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get current version and increment
        id: version
        run: |
          CURRENT_VERSION=$(jq -r '.version' version.json)
          IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
          PATCH_VERSION=$((version_parts[2] + 1))
          NEW_VERSION="${version_parts[0]}.${version_parts[1]}.$PATCH_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          # Update version.json
          jq --arg version "$NEW_VERSION" '.version = $version' version.json > tmp.json && mv tmp.json version.json

      - name: Commit and push version update
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add version.json
          git commit -m "Bump version to ${{ steps.version.outputs.new_version }}"
          git push

      - name: Build and export Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }}
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Save Docker image
        run: |
          docker save ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }} > image.tar

      - name: Copy Docker image to Droplet
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          source: "image.tar"
          target: "/tmp"

      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          script: |
            # Load the Docker image
            docker load < /tmp/image.tar
            rm /tmp/image.tar
            
            # Stop and remove the existing container (if it exists)
            docker stop irma-ui || true
            docker rm irma-ui || true
            
            # Run the new container with the new version
            docker run -d \
              --name irma-ui \
              --restart unless-stopped \
              -p 3000:3000 \
              ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }}
            
            # Clean up old images
            docker image prune -f

